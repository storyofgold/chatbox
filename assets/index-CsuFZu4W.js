(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const c of t.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&n(c)}).observe(document,{childList:!0,subtree:!0});function a(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function n(e){if(e.ep)return;e.ep=!0;const t=a(e);fetch(e.href,t)}})();const W={x:2.5,y:5,width:91.5,height:85},R="--- ANNOTATIONS ---",N="https://vigorously-fun-yak.ngrok-free.app",G=i=>new Promise((s,a)=>{const n=new FileReader;n.onloadend=()=>s(n.result.split(",")[1]),n.onerror=a,n.readAsDataURL(i)}),j=i=>{if(!i)return[];const s=i.split(`
`).map(n=>n.trim()).filter(Boolean),a=[];for(const n of s)try{if(n.toUpperCase().startsWith("LINE:")){const e=/x1=([\d.]+).*y1=([\d.]+).*x2=([\d.]+).*y2=([\d.]+).*color=([^,]+).*strokeWidth=([\d.]+)/i.exec(n);e&&a.push({type:"line",x1:+e[1],y1:+e[2],x2:+e[3],y2:+e[4],color:e[5].trim(),strokeWidth:+e[6]||.3})}else if(n.toUpperCase().startsWith("RECT:")){const e=/x=([\d.]+).*y=([\d.]+).*width=([\d.]+).*height=([\d.]+).*color=([^,]+).*fillOpacity=([\d.]+)/i.exec(n);e&&a.push({type:"rect",x:+e[1],y:+e[2],width:+e[3],height:+e[4],color:e[5].trim(),fillOpacity:+e[6]||.2})}else if(n.toUpperCase().startsWith("TEXT:")){const e=/x=([\d.]+).*y=([\d.]+).*text=\"([^\"]+)\".*color=([^,]+).*fontSize=([\d.]+)/i.exec(n);e&&a.push({type:"text",x:+e[1],y:+e[2],text:e[3],color:e[4].trim(),fontSize:+e[5]||1.5})}}catch(e){console.error("Failed to parse annotation line:",n,e)}return a},K=(i,s,a)=>{i.innerHTML="";const n=document.createElementNS("http://www.w3.org/2000/svg","g");n.setAttribute("transform",`translate(${a.x} ${a.y}) scale(${a.width/100} ${a.height/100})`),s.forEach(e=>{let t;e.type==="line"?(t=document.createElementNS("http://www.w3.org/2000/svg","line"),t.setAttribute("x1",String(e.x1)),t.setAttribute("y1",String(e.y1)),t.setAttribute("x2",String(e.x2)),t.setAttribute("y2",String(e.y2)),t.setAttribute("stroke",e.color||"#ffffff"),t.setAttribute("stroke-width",String(e.strokeWidth))):e.type==="rect"?(t=document.createElementNS("http://www.w3.org/2000/svg","rect"),t.setAttribute("x",String(e.x)),t.setAttribute("y",String(e.y)),t.setAttribute("width",String(e.width)),t.setAttribute("height",String(e.height)),t.setAttribute("fill",e.color||"#ffffff"),t.setAttribute("fill-opacity",String(e.fillOpacity))):e.type==="text"&&(t=document.createElementNS("http://www.w3.org/2000/svg","text"),t.setAttribute("x",String(e.x)),t.setAttribute("y",String(e.y)),t.setAttribute("fill",e.color||"#ffffff"),t.setAttribute("font-size",String(e.fontSize)),t.textContent=e.text),t&&n.appendChild(t)}),i.appendChild(n)},U=i=>i.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/^\s*-\s+(.*)/gm,"<li>$1</li>").replace(/(<\/li>\n<li>)/g,"</li><li>").replace(/<li>.*<\/li>/gs,a=>`<ul>${a}</ul>`).replace(/\n/g,"<br>").replace(/<br>\s*<ul>/g,"<ul>").replace(/<\/ul>\s*<br>/g,"</ul>"),_=(i,s)=>`You are a financial market analyst. Your ONLY task is to analyze the provided chart image based **exclusively** on the "Reference Knowledge" provided below.


**Reference Knowledge:**
**CRITICAL RULE: You MUST NOT use any external knowledge, pre-existing expertise about Wyckoff methodology, or any information not present in the "Reference Knowledge" section. Your entire analysis, including all terminology and concepts, must be derived solely from the provided text. Do not assume or infer anything beyond this text. If the reference knowledge does not contain information to answer a part of the query, you must explicitly state that the information is not available in the provided context.**

---
${i}
---

**User's Query:**
"${s}"

**TASK:**
Your response MUST have two distinct sections separated by '--- ANNOTATIONS ---'.

**PART 1: WYCKOFF ANALYSIS **
This section must be comprehensive and detailed, based *only* on the reference knowledge.
1.  **Comprehensive Analysis:**
    - **Identify the Primary Structure** First, analyze the largest, most dominant Wyckoff pattern visible (e.g., the main accumulation/distribution range over several days or weeks). Describe its potential phases (A, B, C, D, E) and key events including price and time (e.g., 5,400 at 10 August). You must provide the **specific and accurate price and date level** visible on the chart image.
    - **Identify Secondary Structures (Micro-Ranges):** Second, "zoom in" on the chart. Identify smaller, nested accumulation or distribution ranges inside the primary structure. These are critical as they show the detailed 'battle' between buyers and sellers. **Crucially, you must detect these short-term ranges that may only last for 1-2 trading days, which exist within the larger primary structure.**
    - **Connect the Structures:** Explain how these smaller, secondary micro-ranges contribute to, confirm, or contradict the development of the larger, primary structure. For example, does a small re-accumulation range confirm a larger uptrend?
    - **Volume Analysis** make sure your analysis are based on both price and volume.
2.  **Summarize Key Events:** After the detailed analysis, you MUST provide a concise, bulleted list summarizing the most critical Wyckoff events identified (e.g., PSY, BC, AR, ST, Spring, SOS, LPS). For each event, provide its abbreviation and the **exact price level and specific date (e.g., '15 August')** where it occurred.
3.  **Critical Rules for this Section:**
    *   When discussing events in *both* the comprehensive analysis and the summary, you MUST refer to the approximate price levels from the chart's vertical axis (y-axis).
    *   You are STRICTLY FORBIDDEN from using or mentioning (x,y) coordinates in this narrative section.
    *   Use markdown for formatting (e.g., **bold**, *italics*, - lists).

**PART 2: ANNOTATION INSTRUCTIONS**
After a single separator line ('--- ANNOTATIONS ---'), provide a list of instructions to draw on the chart.
1.  **Coordinate System:** All (x, y) coordinates MUST be percentages from 0 to 100.
    *   (0,0) is the top-left corner of the chart's plotting area.
    *   (100,100) is the bottom-right.
    *   **CRITICAL Y-AXIS NOTE:** The Y-axis is INVERTED relative to price. **y=0 is the HIGHEST price** at the top. **y=100 is the LOWEST price** at the bottom. A high point like a "Buying Climax" should have a small Y-coordinate (e.g., y=10), and a low point like a "Spring" should have a large Y-coordinate (e.g., y=90).
2.  **Color-Coding for Multi-Scale Analysis:** Use diffrent color to plot your analysis.
    *   Use one color (e.g., 'lime' or 'green') for annotations related to the **Primary Structure**.
    *   Use a different color (e.g., 'yellow') for annotations highlighting the **Secondary, nested micro-ranges**.
3.  **Critical Rules for this Section:**
    *   This is the ONLY part where you will use (x,y) coordinates.
    *   You MUST visually estimate the coordinates. Do NOT refuse to estimate. Make your best visual estimation.
    *   Use these exact formats. For example:
        RECT: x=5, y=10, width=90, height=80, color=lime, fillOpacity=0.1
        RECT: x=15, y=20, width=30, height=40, color=yellow, fillOpacity=0.15
        TEXT: x=50, y=55, text="Spring", color=white, fontSize=2.0
        LINE: x1=15.5, y1=85.0, x2=70.0, y2=85.0, color=red, strokeWidth=0.5

Begin your analysis now.`,Q=i=>`You are a chart annotation assistant. Your task is to generate drawing instructions based on an existing **Summarize Key Events:** and a chart image.

**Existing Analysis:**
---
${i}
---

**TASK:**
Your response MUST ONLY contain the drawing instructions section.
1.  Read the provided **Summarize Key Events:** carefully.
2.  Based on the **Summarize Key Events:** and the chart image, generate a list of drawing instructions.
3.  Your entire response MUST begin with the separator '--- ANNOTATIONS ---', followed immediately by the list of instructions on new lines.
4.  DO NOT include any narrative, explanation, or any text before the separator. Just the separator and the instructions.

**Coordinate System and Formatting Rules (Follow these STRICTLY):**
*   The coordinate system is a percentage from 0 to 100.
*   (0,0) is top-left, (100,100) is bottom-right.
*   The Y-axis is INVERTED: y=0 corresponds to the HIGHEST price, and y=100 corresponds to the LOWEST price.
*   Use 'lime' or 'green' for annotations related to the Primary (large-scale) Structure.
*   Use 'yellow' for annotations related to the Secondary (small-scale, nested) structures.
*   Use these exact formats without deviation:
    RECT: x=5, y=10, width=90, height=80, color=lime, fillOpacity=0.1
    TEXT: x=50, y=55, text="Spring", color=white, fontSize=2.0
    LINE: x1=15.5, y1=85.0, x2=70.0, y2=85.0, color=red, strokeWidth=0.5

Begin generating the annotation instructions now.`;document.addEventListener("DOMContentLoaded",()=>{const i=document.getElementById("analysis-form"),s=document.getElementById("chart-upload"),a=document.getElementById("upload-button"),n=document.getElementById("file-name-display"),e=document.getElementById("user-query-input"),t=document.getElementById("analyze-button"),c=document.getElementById("analysis-history"),Y=document.querySelector(".placeholder");let C=null;if(!i||!s||!a||!n||!e||!t||!c){console.warn("One or more analysis panel elements are not found in the DOM.");return}const I=()=>{t.disabled=!e.value.trim()},k=o=>{o&&o.type.startsWith("image/")?(C=o,n.textContent=o.name,a.classList.add("file-selected")):(C=null,n.textContent="",a.classList.remove("file-selected"),o&&alert("Please select an image file (e.g., PNG, JPG).")),I()},H=async(o,y)=>{o.preventDefault();const m=o.target.closest(".analysis-entry");if(!m)return;const p=m.dataset.query||"",T=m.dataset.imageData||"",S=m.dataset.imageMime||"image/png",w=m.dataset.imageName||"Chart",E=m.dataset.analysisText||"",u=m.querySelector(".analysis-content");if(!u)return;const x=document.createElement("div");x.className="loader",x.innerText=y==="full"?"Refreshing analysis...":"Refreshing annotations...",u.innerHTML="",u.appendChild(x);const d=document.createElementNS("http://www.w3.org/2000/svg","svg");d.setAttribute("xmlns","http://www.w3.org/2000/svg"),d.setAttribute("viewBox","0 0 800 600"),d.setAttribute("class","svg-overlay");try{let r;if(y==="full"){if(!p)throw new Error("Original query not found for full refresh.");const f=await fetch(`${N}/query`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:userQuery,analysis_type:"Wyckoff"})});if(!f.ok)throw new Error(`Backend error fetching reference: ${f.statusText}`);const b=(await f.json()).reference||"",F=_(b,p),v=await fetch(`${N}/query`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:F,image:{data:T,mimeType:S},analysis_type:"direct_vision"})});if(!v.ok)throw new Error(`Backend API error: ${v.statusText}`);r=(await v.json()).answer}else if(y==="annotations"){if(!E)throw new Error("Cannot refresh annotations: original analysis text not found.");const f=Q(E),g=await fetch(`${N}/query`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:f,image:{data:T,mimeType:S},analysis_type:"direct_vision"})});if(!g.ok)throw new Error(`Backend API error: ${g.statusText}`);r=(await g.json()).answer}if(!r)throw new Error("Received an empty response from the API.");const l=r.indexOf(R);let h=r,A="";l!==-1?(h=r.substring(0,l).trim(),A=r.substring(l+R.length).trim()):y==="annotations"?(A=r.substring(r.indexOf("RECT:")).trim(),console.warn("Annotation separator not found, assuming entire response is annotations.")):console.warn("Annotation separator not found in the response.");const q=j(A);if(K(d,q,W),y==="full"){m.dataset.analysisText=h;const f=document.createElement("div");f.className="image-container",f.innerHTML=`<img src="data:${S};base64,${T}" alt="Chart for ${w}">`,f.appendChild(d);const g=document.createElement("div");g.className="analysis-text",g.innerHTML=U(h),u.innerHTML="",u.appendChild(f),u.appendChild(g)}else x.remove()}catch(r){console.error("❌ Error in analysis flow:",r);const l=document.createElement("div");l.className="analysis-text",l.innerHTML='<p class="error-message">Failed to refresh analysis.</p>',r instanceof Error&&(l.innerHTML+=`<p class="error-details">${r.message}</p>`),u.innerHTML="",u.appendChild(l)}};a.addEventListener("click",()=>s.click()),s.addEventListener("change",()=>k(s.files?s.files[0]:null)),e.addEventListener("input",()=>{I(),e.style.height="auto",e.style.height=`${e.scrollHeight}px`}),c.addEventListener("dragover",o=>{o.preventDefault(),c.classList.add("drag-over")}),c.addEventListener("dragleave",o=>{o.preventDefault(),c.classList.remove("drag-over")}),c.addEventListener("drop",o=>{var m,p;o.preventDefault(),c.classList.remove("drag-over");const y=(p=(m=o.dataTransfer)==null?void 0:m.files)==null?void 0:p[0];y&&(s.files=o.dataTransfer.files,k(y))}),i.addEventListener("submit",async o=>{o.preventDefault();const y=e.value.trim();if(!y)return;Y&&(Y.style.display="none");const m=C,p=document.createElement("div");p.className="analysis-entry";const T=document.createElement("header");T.className="entry-header";const S=document.createElement("span");S.className="query-title",S.textContent=m?`Query for ${m.name}: "${y}"`:`Question: "${y}"`,T.appendChild(S);const w=document.createElement("div");w.className="entry-content";const E=document.createElement("div");E.className="loader",w.appendChild(E),p.append(T,w),c.appendChild(p),c.scrollTop=c.scrollHeight;const u=C,x=e.value;k(null),s.value="",e.value="",e.style.height="auto",I();try{if(u){const d=await G(u);p.dataset.query=x,p.dataset.imageData=d,p.dataset.imageMime=u.type,p.dataset.imageName=u.name;const r=document.createElement("div");r.className="entry-actions";const l=document.createElement("button");l.className="entry-action-button",l.title="Refresh Full Analysis",l.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="23 4 23 10 17 10"></polyline><path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path></svg>',l.onclick=B=>H(B,"full");const h=document.createElement("button");h.className="entry-action-button",h.title="Refresh Annotations Only",h.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"></path><path d="M16.5 3.5a2.12 2.12 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>',h.onclick=B=>H(B,"annotations"),r.append(l,h),T.appendChild(r);const A=await fetch(`${N}/query`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:""})});if(!A.ok)throw new Error(`Backend error fetching reference: ${A.statusText}`);const f=(await A.json()).reference||"",g=_(f,x),b=await fetch(`${N}/api-query`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:g,image:{data:d,mimeType:u.type}})});if(!b.ok)throw new Error(`Backend API error: ${b.statusText}`);const v=(await b.json()).answer;if(!v)throw new Error("Received an empty response from the API.");const L=v.indexOf(R);let D=v,z="";L!==-1?(D=v.substring(0,L).trim(),z=v.substring(L+R.length).trim()):console.warn("Annotation separator not found in the response."),p.dataset.analysisText=D;const M=document.createElement("div");M.className="image-container";const P=document.createElement("img");P.src=URL.createObjectURL(u),P.alt="Uploaded chart for analysis";const O=document.createElementNS("http://www.w3.org/2000/svg","svg");O.setAttribute("class","annotation-overlay"),O.setAttribute("viewBox","0 0 100 100"),O.setAttribute("preserveAspectRatio","none");const J=j(z);K(O,J,W),M.append(P,O);const $=document.createElement("div");$.className="analysis-text",$.innerHTML=U(D),w.innerHTML="",w.append(M,$)}else{const d=await fetch(`${N}/query`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:x})});if(!d.ok)throw new Error(`Backend RAG error: ${d.statusText}`);const l=(await d.json()).answer;if(!l)throw new Error("Received an empty response from the API.");const h=document.createElement("div");h.className="analysis-text",h.innerHTML=U(l),w.replaceChild(h,E)}}catch(d){console.error("Analysis error:",d);const r=document.createElement("div");r.className="analysis-text",r.innerHTML='<p class="error-message">Failed to get analysis. Please check the console for more details.</p>',d instanceof Error&&(r.innerHTML+=`<p class="error-details">${d.message}</p>`),w.replaceChild(r,E)}finally{c.scrollTop=c.scrollHeight}})});
